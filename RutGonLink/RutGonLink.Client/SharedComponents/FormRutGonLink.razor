@using System.ComponentModel.DataAnnotations
@using RutGonLink.Client.Extensions
@using RutGonLink.Client.Interfaces
@using RutGonLink.Client.DTOs
@using System.Security.Claims
@using RutGonLink.Client.Services
@inject ILinkService LinkService
@* @inject ILinkApi LinkApi *@

@inject NavigationManager NavigationManager

<h3>Form Rút Gọn Link</h3>

<div>
  <EditForm Model="_model" OnValidSubmit="RutGonLinkAsync">

    <DataAnnotationsValidator />

    <div class="mb-3">
      @* <input type="text" class="form-control" placeholder="Nhập Một Đường Link Vào" /> *@
      @* <InputText @bind-Value="_model.LongUrl" class="form-control" placeholder="Nhập Một Đường Link Vào"></InputText> *@
      <InputText @bind-Value="_model.LongUrl" class="form-control" placeholder="Nhập Một Đường Link Vào" />
      @* <button class="btn btn-primary">
      Rút Gọn Link
    </button> *@

      @* hiển thị message lỗi message của chức năng rút gọn link *@
      <ValidationMessage For="@(() => _model.LongUrl)" />

    </div>

    <div class="mb-3">
      <button type="submit" class="btn btn-primary" disabled="@_datCoHieu">
        @(_datCoHieu ? "Tiên trình đang được thực thi..." : "Rút gọn link")
      </button>
    </div>

  </EditForm>
</div>

@if (_datCoHieu)
{
  <Loader />
}

@code {

  [CascadingParameter]
  public Task<AuthenticationState> authenticationStateTask { get; set; }

  // private FormRutGonLinkModel _model = new FormRutGonLinkModel();
  private FormRutGonLinkModel _model = new();

  // đặt cờ hiệu check tiến trình của code
  private bool _datCoHieu;

  // ứng dụng làm load quảng cáo khi muốn duy trì trang
  private async Task RutGonLinkAsync()
  {
    // đây là code ví dụ thôi
    _datCoHieu = true;

    var authState = await authenticationStateTask;
    if (authState.User.Identity is null || !authState.User.Identity.IsAuthenticated)
    {
      // chuyển hướng đến trang login
      NavigationManager.NavigateTo("/Account/Login");
      return;
    }
    
    var userId = authState.User.GetUserId();

    // var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)!.Value;

    // Lấy giá trị của Claim "UserId"
    // private string? UserId;
    // var userIdClaim = user.FindFirst(claim => claim.Type == "UserId");
    // if (userIdClaim != null)
    // {
    //   UserId = userIdClaim.Value;
    // }

    // await Task.Delay(2000);
    // code xử lý rút gọn link
    // await LinkService.GenerateShortUrlAsync(_model.LongUrl);
    // GenerateShortUrl();

    var dto = new LinkCreateDto(_model.LongUrl, userId);
    var link = await LinkService.CreateLinkServiceAsync(dto);
    _datCoHieu = false;
    // chúng ta sẽ phải viết logic rút gọn link ở đây
    // và phải liên kết link được render vào domain
  }

  class FormRutGonLinkModel {
    [Required, Length(10, 4000)]
    public string LongUrl { get; set; }
  }

  // private void GenerateShortUrl()
  // {
  //   // Giả sử đây là logic để rút gọn URL
  //   string originalUrl = _model.LongUrl;
  //   string shortUrl = $"http://localhost:7032/{Guid.NewGuid().ToString().Substring(0, 8)}";

  //   Console.WriteLine($"Original URL: {originalUrl}");
  //   Console.WriteLine($"Shortened URL: {shortUrl}");
  // }
}
